// scripts/generate-static-pages.js
// Script √† ex√©cuter lors du build Netlify pour g√©n√©rer des pages statiques

import { writeFile, mkdir, readFile } from 'fs/promises';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Configuration Supabase - utilise les variables d'environnement Netlify
const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY;

console.log('üîß Configuration du script de g√©n√©ration:');
console.log('- SUPABASE_URL:', SUPABASE_URL ? '‚úÖ Configur√©' : '‚ùå Manquant');
console.log('- SUPABASE_ANON_KEY:', SUPABASE_ANON_KEY ? '‚úÖ Configur√©' : '‚ùå Manquant');

// Donn√©es de fallback si Supabase n'est pas configur√©
const FALLBACK_JOBS = [
  {
    id: 1,
    title: "D√©veloppeur Full Stack React/Node.js",
    company: "TechCorp Innovation",
    location: "Paris",
    type: "Mission",
    salary: "650",
    salary_type: "TJM",
    description: "Nous recherchons un d√©veloppeur Full Stack exp√©riment√© pour rejoindre notre √©quipe sur un projet innovant de plateforme e-commerce. Vous travaillerez sur le d√©veloppement d'une application web moderne utilisant React pour le frontend et Node.js pour le backend, avec une base de donn√©es PostgreSQL.",
    requirements: [
      "5+ ann√©es d'exp√©rience en d√©veloppement web",
      "Ma√Ætrise de React et de l'√©cosyst√®me JavaScript moderne",
      "Exp√©rience avec Node.js et Express",
      "Connaissance de PostgreSQL et des ORM (Prisma, Sequelize)",
      "Familiarit√© avec Git et les m√©thodologies Agile"
    ],
    benefits: [
      "T√©l√©travail partiel (3 jours/semaine)",
      "Mutuelle d'entreprise prise en charge √† 100%",
      "Formation continue et budget formation",
      "√âquipement informatique fourni"
    ],
    posted_date: new Date().toISOString().split('T')[0],
    applicants: 12,
    featured: true,
    slug: "developpeur-full-stack-react-nodejs-paris"
  },
  {
    id: 2,
    title: "Expert Cybers√©curit√©",
    company: "SecureIT Solutions",
    location: "Lyon",
    type: "CDI",
    salary: "65K-75K",
    salary_type: "Annuel",
    description: "Rejoignez notre √©quipe de cybers√©curit√© en tant qu'expert pour prot√©ger nos infrastructures et celles de nos clients. Vous serez responsable de l'analyse des menaces, de la mise en place de solutions de s√©curit√©, et de la formation des √©quipes aux bonnes pratiques.",
    requirements: [
      "Master en cybers√©curit√© ou √©quivalent",
      "Certifications CISSP, CEH ou √©quivalent",
      "Exp√©rience avec les outils SIEM",
      "Connaissance des frameworks de s√©curit√© (ISO 27001, NIST)"
    ],
    benefits: [
      "CDI avec p√©riode d'essai de 3 mois",
      "13√®me mois + prime de performance",
      "Formation certifiante prise en charge",
      "T√©l√©travail 2 jours/semaine"
    ],
    posted_date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    applicants: 8,
    featured: false,
    slug: "expert-cybersecurite-lyon"
  }
];

// Fonction pour g√©n√©rer le slug
function generateSlug(title, location) {
  return `${title}-${location}`
    .toLowerCase()
    .replace(/[√†√°√§√¢]/g, 'a')
    .replace(/[√®√©√´√™]/g, 'e')
    .replace(/[√¨√≠√Ø√Æ]/g, 'i')
    .replace(/[√≤√≥√∂√¥]/g, 'o')
    .replace(/[√π√∫√º√ª]/g, 'u')
    .replace(/[√ß]/g, 'c')
    .replace(/[^a-z0-9]/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '');
}

// R√©cup√©rer les jobs depuis Supabase
async function fetchJobs() {
  if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
    console.warn('‚ö†Ô∏è  Variables Supabase manquantes - Utilisation des donn√©es de fallback');
    return FALLBACK_JOBS;
  }

  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/jobs?order=created_at.desc`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    return data.length > 0 ? data : FALLBACK_JOBS;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des jobs:', error.message);
    console.log('üì¶ Utilisation des donn√©es de fallback');
    return FALLBACK_JOBS;
  }
}

// Template HTML pour une page de job
function generateJobPageHTML(job) {
  const structuredData = {
    "@context": "https://schema.org/",
    "@type": "JobPosting",
    "title": job.title,
    "description": job.description,
    "identifier": {
      "@type": "PropertyValue",
      "name": "Ma Nouvelle Mission",
      "value": job.id
    },
    "datePosted": job.posted_date || new Date().toISOString().split('T')[0],
    "validThrough": new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    "employmentType": job.type === "CDI" ? "FULL_TIME" : "CONTRACTOR",
    "hiringOrganization": {
      "@type": "Organization",
      "name": job.company,
      "sameAs": "https://manouvellemission.com"
    },
    "jobLocation": {
      "@type": "Place",
      "address": {
        "@type": "PostalAddress",
        "addressLocality": job.location.split(',')[0],
        "addressCountry": "FR"
      }
    },
    "baseSalary": {
      "@type": "MonetaryAmount",
      "currency": "EUR",
      "value": {
        "@type": "QuantitativeValue",
        "value": job.salary,
        "unitText": job.salary_type === "TJM" ? "DAY" : "YEAR"
      }
    }
  };

  return `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    
    <!-- SEO Optimis√© pour cette offre -->
    <title>${job.title} - ${job.company} | ${job.location} - Ma Nouvelle Mission</title>
    <meta name="description" content="${job.title} chez ${job.company} √† ${job.location}. ${job.description.substring(0, 150)}... TJM: ${job.salary}‚Ç¨. Postulez maintenant!">
    <meta name="keywords" content="${job.title}, ${job.company}, ${job.location}, emploi IT, mission freelance, ${job.type}, TJM ${job.salary}">
    
    <!-- URL Canonique -->
    <link rel="canonical" href="https://manouvellemission.com/jobs/${job.slug || generateSlug(job.title, job.location)}" />
    
    <!-- Open Graph -->
    <meta property="og:title" content="${job.title} - ${job.company}" />
    <meta property="og:description" content="${job.description.substring(0, 150)}..." />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://manouvellemission.com/jobs/${job.slug || generateSlug(job.title, job.location)}" />
    <meta property="og:image" content="https://i.postimg.cc/gw453gDP/Manouvellemission.png" />
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="${job.title} - ${job.company}" />
    <meta name="twitter:description" content="${job.description.substring(0, 150)}..." />
    
    <!-- Structured Data pour Google Jobs -->
    <script type="application/ld+json">
    ${JSON.stringify(structuredData, null, 2)}
    </script>
    
    <link rel="icon" type="image/png" href="https://i.postimg.cc/gw453gDP/Manouvellemission.png">
    <style>
        body { font-family: system-ui, -apple-system, sans-serif; line-height: 1.6; margin: 0; padding: 0; }
        .container { max-width: 1200px; margin: 0 auto; padding: 0 1rem; }
        .header { background: white; box-shadow: 0 2px 4px rgba(0,0,0,0.1); padding: 1rem 0; }
        .logo { height: 2.5rem; }
        .main { padding: 2rem 0; }
        .job-header { background: #f8fafc; padding: 1.5rem; border-radius: 0.5rem; margin-bottom: 2rem; }
        .job-title { font-size: 2rem; font-weight: bold; margin-bottom: 0.5rem; }
        .job-company { font-size: 1.25rem; color: #4f46e5; margin-bottom: 0.5rem; }
        .job-meta { display: flex; gap: 1rem; flex-wrap: wrap; color: #6b7280; }
        .job-salary { font-size: 1.5rem; font-weight: bold; color: #059669; }
        .section { margin-bottom: 2rem; }
        .section h2 { font-size: 1.5rem; margin-bottom: 1rem; }
        .requirements, .benefits { list-style: none; padding: 0; }
        .requirements li, .benefits li { padding: 0.5rem 0; border-bottom: 1px solid #e5e7eb; }
        .requirements li:before { content: "‚úì "; color: #059669; font-weight: bold; }
        .benefits li:before { content: "‚ú® "; }
        .cta { background: #dbeafe; padding: 2rem; border-radius: 0.5rem; text-align: center; }
        .btn { background: #4f46e5; color: white; padding: 0.75rem 2rem; border-radius: 0.5rem; text-decoration: none; display: inline-block; }
        .footer { background: #1f2937; color: white; padding: 2rem 0; text-align: center; }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="container">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <a href="/" style="display: flex; align-items: center;">
                    <img src="https://i.postimg.cc/gw453gDP/Manouvellemission.png" alt="Ma Nouvelle Mission" class="logo" />
                </a>
                <nav style="display: flex; gap: 2rem;">
                    <a href="/" style="text-decoration: none; color: #374151;">Accueil</a>
                    <a href="/#jobs" style="text-decoration: none; color: #374151;">Toutes les missions</a>
                </nav>
            </div>
        </div>
    </header>

    <!-- Contenu principal -->
    <main class="main">
        <div class="container">
            <article>
                <div class="job-header">
                    <h1 class="job-title">${job.title}</h1>
                    <p class="job-company">${job.company}</p>
                    <div class="job-meta">
                        <span>üìç ${job.location}</span>
                        <span>üíº ${job.type}</span>
                        <span class="job-salary">
                            ${job.salary_type === 'TJM' ? `${job.salary}‚Ç¨/jour` : `${job.salary}‚Ç¨/an`}
                        </span>
                    </div>
                </div>

                <div class="section">
                    <h2>Description du poste</h2>
                    <p style="white-space: pre-line;">${job.description}</p>
                </div>

                ${job.requirements && job.requirements.length > 0 ? `
                <div class="section">
                    <h2>Comp√©tences requises</h2>
                    <ul class="requirements">
                        ${job.requirements.map(req => `<li>${req}</li>`).join('')}
                    </ul>
                </div>
                ` : ''}

                ${job.benefits && job.benefits.length > 0 ? `
                <div class="section">
                    <h2>Avantages</h2>
                    <ul class="benefits">
                        ${job.benefits.map(benefit => `<li>${benefit}</li>`).join('')}
                    </ul>
                </div>
                ` : ''}

                <div class="cta">
                    <h2>Int√©ress√©(e) par cette mission ?</h2>
                    <a href="https://manouvellemission.com/?job=${job.id}" class="btn">
                        Postuler maintenant
                    </a>
                    <p style="margin-top: 1rem; color: #6b7280;">
                        ${job.applicants || 0} candidat${(job.applicants || 0) > 1 ? 's ont' : ' a'} d√©j√† postul√©
                    </p>
                </div>
            </article>
        </div>
    </main>

    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 Ma Nouvelle Mission - Get in Talent</p>
            <div style="margin-top: 1rem;">
                <a href="/" style="color: #9ca3af; margin: 0 1rem;">Accueil</a>
                <a href="/#jobs" style="color: #9ca3af; margin: 0 1rem;">Toutes les missions</a>
                <a href="/#contact" style="color: #9ca3af; margin: 0 1rem;">Contact</a>
            </div>
        </div>
    </footer>
</body>
</html>`;
}

// G√©n√©rer le sitemap
function generateSitemap(jobs) {
  const urls = [
    {
      loc: 'https://manouvellemission.com/',
      changefreq: 'daily',
      priority: '1.0'
    },
    ...jobs.map(job => ({
      loc: `https://manouvellemission.com/jobs/${job.slug || generateSlug(job.title, job.location)}`,
      lastmod: job.updated_at || job.created_at || new Date().toISOString(),
      changefreq: 'weekly',
      priority: '0.8'
    }))
  ];

  return `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${urls.map(url => `  <url>
    <loc>${url.loc}</loc>
    ${url.lastmod ? `<lastmod>${url.lastmod}</lastmod>` : ''}
    <changefreq>${url.changefreq}</changefreq>
    <priority>${url.priority}</priority>
  </url>`).join('\n')}
</urlset>`;
}

// G√©n√©rer le fichier robots.txt
function generateRobotsTxt() {
  return `User-agent: *
Allow: /

Sitemap: https://manouvellemission.com/sitemap.xml`;
}

// Fonction principale
async function generateStaticPages() {
  console.log('üöÄ G√©n√©ration des pages statiques...');
  
  try {
    // R√©cup√©rer les jobs
    const jobs = await fetchJobs();
    console.log(`üìä ${jobs.length} jobs trouv√©s`);
    
    // D√©terminer le r√©pertoire de build
    const buildDir = join(process.cwd(), 'dist');
    
    // Cr√©er le dossier jobs s'il n'existe pas
    const jobsDir = join(buildDir, 'jobs');
    await mkdir(jobsDir, { recursive: true });
    
    // G√©n√©rer une page pour chaque job
    for (const job of jobs) {
      const slug = job.slug || generateSlug(job.title, job.location);
      const jobDir = join(jobsDir, slug);
      await mkdir(jobDir, { recursive: true });
      
      const html = generateJobPageHTML(job);
      await writeFile(join(jobDir, 'index.html'), html);
      console.log(`‚úÖ Page g√©n√©r√©e: /jobs/${slug}`);
    }
    
    // G√©n√©rer le sitemap
    const sitemap = generateSitemap(jobs);
    await writeFile(join(buildDir, 'sitemap.xml'), sitemap);
    console.log('‚úÖ Sitemap g√©n√©r√©');
    
    // G√©n√©rer robots.txt
    const robotsTxt = generateRobotsTxt();
    await writeFile(join(buildDir, 'robots.txt'), robotsTxt);
    console.log('‚úÖ robots.txt g√©n√©r√©');

    // Copier success.html dans build si il existe
    try {
      const successContent = await readFile(join(process.cwd(), 'public', 'success.html'), 'utf8');
      await writeFile(join(buildDir, 'success.html'), successContent);
      console.log('‚úÖ Page success.html copi√©e');
    } catch (error) {
      console.log('‚ö†Ô∏è  Page success.html non trouv√©e dans public');
    }
    
    console.log('üéâ G√©n√©ration termin√©e avec succ√®s!');
    console.log(`üìÅ Fichiers g√©n√©r√©s dans: ${buildDir}`);
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration:', error);
    process.exit(1);
  }
}

// Ex√©cuter si appel√© directement
generateStaticPages();

