// src/services/jobService.js - Service de gestion des emplois avec fallback
import { supabase, isSupabaseConfigured } from '../lib/supabase';

// Donn√©es de fallback si Supabase n'est pas configur√©
const FALLBACK_JOBS = [
  {
    id: 1,
    title: "D√©veloppeur Full Stack React/Node.js",
    company: "TechCorp Innovation",
    location: "Paris",
    type: "Mission",
    salary: "650",
    salary_type: "TJM",
    description: `Nous recherchons un d√©veloppeur Full Stack exp√©riment√© pour rejoindre notre √©quipe sur un projet innovant de plateforme e-commerce.

Vous travaillerez sur le d√©veloppement d'une application web moderne utilisant React pour le frontend et Node.js pour le backend, avec une base de donn√©es PostgreSQL.

Le projet implique la cr√©ation de fonctionnalit√©s avanc√©es comme un syst√®me de paiement int√©gr√©, un tableau de bord administrateur, et une API REST robuste.

Vous collaborerez √©troitement avec notre √©quipe de designers UX/UI et participerez aux d√©cisions techniques importantes.`,
    requirements: [
      "5+ ann√©es d'exp√©rience en d√©veloppement web",
      "Ma√Ætrise de React et de l'√©cosyst√®me JavaScript moderne",
      "Exp√©rience avec Node.js et Express",
      "Connaissance de PostgreSQL et des ORM (Prisma, Sequelize)",
      "Familiarit√© avec Git et les m√©thodologies Agile",
      "Capacit√© √† travailler en √©quipe et √† communiquer efficacement"
    ],
    benefits: [
      "T√©l√©travail partiel (3 jours/semaine)",
      "Mutuelle d'entreprise prise en charge √† 100%",
      "Formation continue et budget formation",
      "√âquipement informatique fourni",
      "Tickets restaurant",
      "Ambiance de travail d√©contract√©e"
    ],
    posted_date: new Date().toISOString().split('T')[0],
    applicants: 12,
    featured: true,
    slug: "developpeur-full-stack-react-nodejs-paris"
  },
  {
    id: 2,
    title: "Expert Cybers√©curit√©",
    company: "SecureIT Solutions",
    location: "Lyon",
    type: "CDI",
    salary: "65K-75K",
    salary_type: "Annuel",
    description: `Rejoignez notre √©quipe de cybers√©curit√© en tant qu'expert pour prot√©ger nos infrastructures et celles de nos clients.

Vous serez responsable de l'analyse des vuln√©rabilit√©s, de la mise en place de solutions de s√©curit√©, et de la formation des √©quipes aux bonnes pratiques.

Mission passionnante dans un secteur en pleine croissance avec des d√©fis techniques stimulants.`,
    requirements: [
      "Master en cybers√©curit√© ou √©quivalent",
      "Certifications CISSP, CEH ou similaires",
      "Exp√©rience en pentesting et audit de s√©curit√©",
      "Ma√Ætrise des outils de s√©curit√© (Nessus, Metasploit, etc.)",
      "Connaissance des normes ISO 27001",
      "Capacit√© √† r√©diger des rapports techniques"
    ],
    benefits: [
      "Salaire attractif avec primes",
      "Formation continue certifiante",
      "Mat√©riel de pointe fourni",
      "Participation aux conf√©rences s√©curit√©",
      "T√©l√©travail possible",
      "Mutuelle premium"
    ],
    posted_date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    applicants: 8,
    featured: false,
    slug: "expert-cybersecurite-lyon"
  },
  {
    id: 3,
    title: "DevOps Engineer",
    company: "CloudTech Startup",
    location: "Marseille",
    type: "Mission",
    salary: "600",
    salary_type: "TJM",
    description: `Nous cherchons un DevOps Engineer pour optimiser notre infrastructure cloud et automatiser nos processus de d√©ploiement.

Vous travaillerez avec des technologies modernes comme Kubernetes, Docker, et Terraform pour cr√©er une infrastructure scalable et robuste.

Environnement startup dynamique avec beaucoup d'autonomie et d'opportunit√©s d'apprentissage.`,
    requirements: [
      "3+ ann√©es d'exp√©rience DevOps",
      "Ma√Ætrise de Docker et Kubernetes",
      "Exp√©rience avec AWS/Azure/GCP",
      "Connaissance de Terraform et Ansible",
      "Scripting Bash/Python",
      "Exp√©rience CI/CD (Jenkins, GitLab CI)"
    ],
    benefits: [
      "√âquipe jeune et dynamique",
      "Technologies de pointe",
      "Possibilit√© de t√©l√©travail",
      "Formation sur les nouvelles technologies cloud",
      "Environnement startup dynamique"
    ],
    posted_date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    applicants: 5,
    featured: true,
    slug: "devops-engineer-marseille"
  }
];

// Cache pour les jobs
let jobsCache = null;
let cacheTimestamp = null;
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

export const jobService = {
  // R√©cup√©rer toutes les missions avec cache et timeout
  async fetchJobs() {
    // V√©rifier le cache d'abord
    if (jobsCache && cacheTimestamp && (Date.now() - cacheTimestamp < CACHE_DURATION)) {
      console.log('Utilisation du cache pour les jobs');
      return jobsCache;
    }

    if (!isSupabaseConfigured()) {
      console.warn('Supabase non configur√©, utilisation des donn√©es de fallback');
      jobsCache = FALLBACK_JOBS;
      cacheTimestamp = Date.now();
      return FALLBACK_JOBS;
    }

    try {
      // Timeout pour √©viter les blocages
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout')), 30000)
      );

      const supabasePromise = supabase
        .from('jobs')
        .select('*')
        .order('created_at', { ascending: false });

      const { data, error } = await Promise.race([supabasePromise, timeoutPromise]);

      if (error) {
        console.error('Erreur Supabase:', error);
        // Retourner le cache si disponible, sinon fallback
        return jobsCache || FALLBACK_JOBS;
      }

      // Mettre √† jour le cache
      jobsCache = data || FALLBACK_JOBS;
      cacheTimestamp = Date.now();
      
      return jobsCache;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des jobs:', error);
      // Retourner le cache si disponible, sinon fallback
      return jobsCache || FALLBACK_JOBS;
    }
  },

  // Invalider le cache
  clearCache() {
    jobsCache = null;
    cacheTimestamp = null;
  },

  // Cr√©er une nouvelle mission
 async createJob(jobData) {
  if (!isSupabaseConfigured()) {
    throw new Error('Service de base de donn√©es non disponible. Veuillez contacter l\'administrateur.');
  }

  console.log('[jobService.createJob] D√©but cr√©ation:', {
    title: jobData.title,
    timestamp: new Date().toISOString()
  });

  // Format propre
  const cleanData = {
    ...jobData,
    requirements: Array.isArray(jobData.requirements)
      ? jobData.requirements
      : jobData.requirements.split('\n').filter(r => r.trim()),
    benefits: Array.isArray(jobData.benefits)
      ? jobData.benefits
      : jobData.benefits.split('\n').filter(b => b.trim()),
    applicants: jobData.applicants || 0,
    created_at: new Date().toISOString()
  };

  // Log du slug + taille du payload
  const payloadSize = new Blob([JSON.stringify(cleanData)]).size;
  console.log(`[jobService.createJob] Slug: ${cleanData.slug}`);
  console.log(`[jobService.createJob] Taille du payload: ${payloadSize} octets`);

  // V√©rif duplication slug
  const { data: existingSlug, error: slugCheckError } = await supabase
    .from('jobs')
    .select('id')
    .eq('slug', cleanData.slug);

  if (slugCheckError) {
    console.error('[jobService.createJob] Erreur v√©rif slug:', slugCheckError);
  }

  if (existingSlug && existingSlug.length > 0) {
    throw new Error('Une mission avec ce titre (slug) existe d√©j√†.');
  }
   
  try {
  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), 30000);

  console.log('[jobService.createJob] üü° Envoi de la requ√™te Supabase...');
  
  const { data, error } = await supabase
    .from('jobs')
    .insert([cleanData], { signal: controller.signal })
    .select();

  clearTimeout(timeout);

  console.log('[jobService.createJob] üü¢ R√©ponse Supabase re√ßue:', { data, error });

  if (error) {
    console.error('[jobService.createJob] üî¥ Erreur Supabase:', error);
    throw new Error(error.message || 'Erreur inconnue Supabase');
  }

  if (!data || data.length === 0) {
    throw new Error('Aucune donn√©e retourn√©e apr√®s insertion');
  }

  this.clearCache();
  console.log('[jobService.createJob] ‚úÖ Mission cr√©√©e avec succ√®s');
  return { success: true, data: data[0] };

} catch (error) {
  console.error('[jobService.createJob] ‚ùå Erreur finale:', error);
  if (error.name === 'AbortError') {
    throw new Error('‚è± La requ√™te Supabase a √©t√© annul√©e (d√©lai d√©pass√©)');
  }
  throw error;
}
},

  // Mettre √† jour une mission
  async updateJob(id, jobData) {
    if (!isSupabaseConfigured()) {
      throw new Error('Service de base de donn√©es non disponible. Veuillez contacter l\'administrateur.');
    }

    console.log('[jobService.updateJob] D√©but mise √† jour:', {
      id,
      title: jobData.title,
      timestamp: new Date().toISOString()
    });

    try {
      // S'assurer que les donn√©es sont correctement format√©es
      const cleanData = {
        ...jobData,
        requirements: Array.isArray(jobData.requirements) 
          ? jobData.requirements 
          : jobData.requirements.split('\n').filter(r => r.trim()),
        benefits: Array.isArray(jobData.benefits)
          ? jobData.benefits
          : jobData.benefits.split('\n').filter(b => b.trim()),
        updated_at: new Date().toISOString()
      };

      console.log('[jobService.updateJob] Donn√©es pr√©par√©es, envoi √† Supabase...');

      // Cr√©er une promesse avec timeout
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout: La requ√™te Supabase prend trop de temps')), 30000);
      });

      const supabasePromise = supabase
        .from('jobs')
        .update(cleanData)
        .eq('id', id)
        .select();

      console.log('[jobService.updateJob] Requ√™te envoy√©e, attente de la r√©ponse...');

      const { data, error } = await Promise.race([supabasePromise, timeoutPromise]);

      console.log('[jobService.updateJob] R√©ponse re√ßue:', { data, error });

      if (error) {
        console.error('[jobService.updateJob] Erreur Supabase:', error);
        console.error('[jobService.updateJob] D√©tails erreur:', {
          message: error.message,
          code: error.code,
          details: error.details,
          hint: error.hint
        });
        
        if (error.code === '23502') {
          throw new Error('Donn√©es manquantes. Veuillez remplir tous les champs obligatoires');
        } else if (error.message?.includes('JWT')) {
          throw new Error('Session expir√©e. Veuillez vous reconnecter');
        }
        
        throw new Error(error.message || 'Erreur lors de la mise √† jour de la mission');
      }

      if (!data || data.length === 0) {
        console.error('[jobService.updateJob] Pas de donn√©es retourn√©es');
        throw new Error('Mission non trouv√©e ou non modifi√©e');
      }

      console.log('[jobService.updateJob] Mise √† jour r√©ussie:', data);

      // Invalider le cache
      this.clearCache();
      
      console.log('[jobService.updateJob] Cache invalid√©, retour des donn√©es');
      
      return { success: true, data: data[0] };
    } catch (error) {
      console.error('[jobService.updateJob] Erreur finale:', error);
      console.error('[jobService.updateJob] Stack:', error.stack);
      throw error;
    }
  },

  // Supprimer une mission
  async deleteJob(id) {
    if (!isSupabaseConfigured()) {
      throw new Error('Service de base de donn√©es non disponible. Veuillez contacter l\'administrateur.');
    }

    console.log('[jobService.deleteJob] Suppression job:', id);

    try {
      // Cr√©er une promesse avec timeout
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout: La requ√™te Supabase prend trop de temps')), 30000);
      });

      const supabasePromise = supabase
        .from('jobs')
        .delete()
        .eq('id', id);

      console.log('[jobService.deleteJob] Requ√™te envoy√©e, attente de la r√©ponse...');

      const { error } = await Promise.race([supabasePromise, timeoutPromise]);

      if (error) {
        console.error('[jobService.deleteJob] Erreur Supabase:', error);
        
        if (error.message?.includes('JWT')) {
          throw new Error('Session expir√©e. Veuillez vous reconnecter');
        }
        
        throw new Error(error.message || 'Erreur lors de la suppression de la mission');
      }

      console.log('[jobService.deleteJob] Suppression r√©ussie');

      // Invalider le cache
      this.clearCache();
      
      return { success: true };
    } catch (error) {
      console.error('[jobService.deleteJob] Erreur finale:', error);
      console.error('[jobService.deleteJob] Stack:', error.stack);
      throw error;
    }
  },

  // Incr√©menter le nombre de candidatures
  async incrementApplicants(jobId) {
    if (!isSupabaseConfigured()) {
      return { success: false, message: 'Service de base de donn√©es non disponible' };
    }

    try {
      // Cr√©er une promesse avec timeout
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout')), 30000);
      });

      // R√©cup√©rer le nombre actuel
      const { data, error } = await Promise.race([
        supabase.from('jobs').select('applicants').eq('id', jobId).single(),
        timeoutPromise
      ]);

      if (error) {
        console.error('Erreur lors de la r√©cup√©ration:', error);
        return { success: false, message: 'Mission non trouv√©e' };
      }

      const newCount = (data.applicants || 0) + 1;

      // Mettre √† jour le compteur
      const { error: updateError } = await Promise.race([
        supabase.from('jobs').update({ applicants: newCount }).eq('id', jobId),
        timeoutPromise
      ]);

      if (updateError) {
        console.error('Erreur lors de la mise √† jour:', updateError);
        return { success: false, message: 'Erreur lors de la mise √† jour' };
      }

      // Invalider le cache
      this.clearCache();
      return { success: true, newCount };
    } catch (error) {
      console.error('Erreur incrementApplicants:', error);
      return { success: false, message: 'Erreur technique' };
    }
  }
};

// ‚úÖ NOUVELLES FONCTIONS POUR LA PAGINATION ET L'ACCUEIL

// R√©cup√©rer 6 missions pour l'accueil
export const fetchJobsHome = async () => {
  if (!isSupabaseConfigured()) {
    console.warn('Supabase non configur√©, utilisation des donn√©es de fallback (6 premi√®res)');
    return FALLBACK_JOBS.slice(0, 6);
  }

  try {
    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Timeout')), 30000)
    );

    const { data, error } = await Promise.race([
      supabase
        .from('jobs')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(6),
      timeoutPromise
    ]);

    if (error) {
      console.error('Erreur fetchJobsHome:', error);
      return FALLBACK_JOBS.slice(0, 6);
    }
    
    return data || FALLBACK_JOBS.slice(0, 6);
  } catch (error) {
    console.error('Erreur fetchJobsHome:', error);
    return FALLBACK_JOBS.slice(0, 6);
  }
};

// R√©cup√©rer les missions avec pagination
export const fetchJobsPaginated = async (page = 1, limit = 12) => {
  if (!isSupabaseConfigured()) {
    console.warn('Supabase non configur√©, utilisation des donn√©es de fallback avec pagination simul√©e');
    const start = (page - 1) * limit;
    const end = start + limit;
    const paginatedJobs = FALLBACK_JOBS.slice(start, end);
    
    return {
      jobs: paginatedJobs,
      totalCount: FALLBACK_JOBS.length,
      totalPages: Math.ceil(FALLBACK_JOBS.length / limit),
      currentPage: page
    };
  }

  try {
    const start = (page - 1) * limit;
    const end = start + limit - 1;
    
    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Timeout')), 30000)
    );

    const { data, error, count } = await Promise.race([
      supabase
        .from('jobs')
        .select('*', { count: 'exact' })
        .order('created_at', { ascending: false })
        .range(start, end),
      timeoutPromise
    ]);

    if (error) {
      console.error('Erreur fetchJobsPaginated:', error);
      // Fallback avec pagination simul√©e
      const start = (page - 1) * limit;
      const end = start + limit;
      const paginatedJobs = FALLBACK_JOBS.slice(start, end);
      
      return {
        jobs: paginatedJobs,
        totalCount: FALLBACK_JOBS.length,
        totalPages: Math.ceil(FALLBACK_JOBS.length / limit),
        currentPage: page
      };
    }
    
    return {
      jobs: data || [],
      totalCount: count || 0,
      totalPages: Math.ceil((count || 0) / limit),
      currentPage: page
    };
  } catch (error) {
    console.error('Erreur fetchJobsPaginated:', error);
    // Fallback avec pagination simul√©e
    const start = (page - 1) * limit;
    const end = start + limit;
    const paginatedJobs = FALLBACK_JOBS.slice(start, end);
    
    return {
      jobs: paginatedJobs,
      totalCount: FALLBACK_JOBS.length,
      totalPages: Math.ceil(FALLBACK_JOBS.length / limit),
      currentPage: page
    };
  }
};
